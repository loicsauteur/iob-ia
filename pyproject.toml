# https://peps.python.org/pep-0517/
[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

# https://hatch.pypa.io/latest/config/metadata/
[tool.hatch.version]
source = "vcs"

# read more about configuring hatch at:
# https://hatch.pypa.io/latest/config/build/
[tool.hatch.build.targets.wheel]
only-include = ["src"]
sources = ["src"]

# Allow to install dependencies directly from github
[tool.hatch.metadata]
allow-direct-references = true

# https://peps.python.org/pep-0621/
[project]
name = "iob-ia"
dynamic = ["version"]
description = "Package for image analysis."
readme = "README.md"
requires-python = ">=3.10"
license = { text = "BSD-3-Clause" }
authors = [{ name = "Lo√Øc Sauteur", email = "loic.sauteur@unibas.ch" }]
# https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Typing :: Typed",
]
# add your package dependencies here
dependencies = [
    # 'napari==0.5.5', # TODO: previously together with the napari[all] (below)
    'napari[all]', # TODO: check that everything works with the latest napari
    'bioio-bioformats', # TODO checking if newest version works (instead of ==1.0.0)
    'bioio', # TODO checking if newest version works (instead of ==1.1.0)
    'bioio-nd2',
    # 'cellpose[all]==3.1.1.1', # [all], also installs the distributed_segmentation dependencies
    'cellpose[all]', # [all], also installs the distributed_segmentation dependencies
    'dask_image', # for cellpose 3.1.1.1
    'dask_jobqueue', # for cellpose 3.1.1.1
    'bokeh', # for cellpose 3.1.1.1 and dask (localhost when segmenting)
    'notebook==7.3.2',
    # install the label filter plugin from specific branch
    # 'napari-filter-labels-by-prop@git+https://github.com/loicsauteur/napari-filter-labels-by-prop@ProjectedProps',
    'napari-filter-labels-by-prop',

    # 'pyclesperanto-prototype', # Fixme for testing # Fixme: remove
    # 'siphash24', # for CLE # Fixme: remove

    # FIXME cucim to use skimage on GPU, but region_props is still on CPU
    # Install cucim, see here: https://github.com/rapidsai/cucim/issues/86#issuecomment-905919774
    # "git+https://github.com/rapidsai/cucim.git@v21.08.01#egg=cucim&subdirectory=python/cucim" scipy scikit-image
    # 'cucim-cu11', # skimage on GPU (for CUDA 11) - does not work (not Win compatible)
    # 'cucim@git+https://github.com/rapidsai/cucim.git@v22.12.00#egg=cucim&subdirectory=python/cucim',
    # 'cupy-cuda11x==13.4.1', # needed for cucim (installs also fastrlock)

    'numpy==1.26.4',
    'scikit-image==0.22.0',
    'scipy==1.15.1',
]

# https://peps.python.org/pep-0621/#dependencies-optional-dependencies
# "extras" (e.g. for `pip install .[test]`)
[project.optional-dependencies]
# add dependencies used for testing here
test = [
    "pytest",
    "pytest-cov",
    "scyjava",
]
# add anything else you like to have in your dev environment here
dev = [
    "ipython",
    "pdbpp",  # https://github.com/pdbpp/pdbpp
    "pre-commit",
    "rich",  # https://github.com/Textualize/rich
    "ruff",
]

[project.urls]
homepage = "https://github.com/loicsauteur/iob-ia"
repository = "https://github.com/loicsauteur/iob-ia"

# Entry points
# https://peps.python.org/pep-0621/#entry-points
# same as console_scripts entry point
# [project.scripts]
# iob-ia-cli = "iob_ia:main_cli"

# [project.entry-points."some.group"]
# tomatoes = "iob_ia:main_tomatoes"

[tool.black]
line-length = 79
target-version = ['py38', 'py39', 'py310']

# https://docs.astral.sh/ruff
[tool.ruff]
line-length = 79
target-version = "py39"
src = ["src"]
fix = true

# https://docs.astral.sh/ruff/rules
[tool.ruff.lint]
pydocstyle = { convention = "numpy" }
select = [
    "E",    # style errors
    "W",    # style warnings
    "F",    # flakes
    "D",    # pydocstyle
    "D417", # Missing argument descriptions in Docstrings
    "I",    # isort
    "UP",   # pyupgrade
    "C4",   # flake8-comprehensions
    "B",    # flake8-bugbear
    "A001", # flake8-builtins
    "RUF",  # ruff-specific rules
    "TCH",  # flake8-type-checking
    "TID",  # flake8-tidy-imports
]
ignore = [
    "D401", # First line should be in imperative mood (remove to opt in)
    "D100", # Missing docstring in public module
    "UP006", # type annotations (get it when using typing.Dict)
    "E501", # line too long. let black handle this
]

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ["D", "S"]

# https://docs.astral.sh/ruff/formatter/
[tool.ruff.format]
docstring-code-format = true
skip-magic-trailing-comma = false  # default is false

# https://docs.pytest.org/
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
filterwarnings = ["error"]

# https://coverage.readthedocs.io/
[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "@overload",
    "except ImportError",
    "\\.\\.\\.",
    "raise NotImplementedError()",
    "pass",
]

[tool.coverage.run]
source = ["iob_ia"]

# https://github.com/mgedmin/check-manifest#configuration
# add files that you want check-manifest to explicitly ignore here
# (files that are in the repo but shouldn't go in the package)
[tool.check-manifest]
ignore = [
    ".pre-commit-config.yaml",
    ".ruff_cache/**/*",
    "tests/**/*",
]
